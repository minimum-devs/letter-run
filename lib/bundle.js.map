{"version":3,"sources":["webpack:///webpack/bootstrap dbeb2b526f2d1428b0a5","webpack:///./lib/game.js","webpack:///./lib/tile.js","webpack:///./lib/main.js","webpack:///./lib/game-view.js","webpack:///./lib/board.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AC7DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACrBA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;ACND;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,iCAAiC;AACzD,0BAA0B,gCAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,iCAAiC;AACzD,0BAA0B,gCAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;AC7MA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,6CAA6C,yBAAyB;AACtE;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC,qBAAqB,yBAAyB;AAC9C,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yBAAyB;AAC9C,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dbeb2b526f2d1428b0a5","const Board = require(\"./board\");\nconst Tile = require(\"./tile\");\n\nclass Game {\n\n  constructor(dictionary) {\n    this.board = new Board(10,4);\n    this.score = 0;\n    this.dict = dictionary;\n\n    this.goodWord = document.getElementById(\"goodWord\");\n    this.badWord = document.getElementById(\"badWord\");\n\n  }\n\n  // check the submitted word against a dictionary. If the word exists,\n  // clear its letters from the screen and add points to the player's score.\n  handleWord(word) {\n    if (this.dict.includes(word.toLowerCase()) && word.length >= 3 &&\n      this.board.validWord(word)) {\n        this.incrementScore(word);\n        this.board.clearWord(word);\n        this.goodWord.play();\n    } else {\n      document.getElementById(\"word-input\").style.outline = '#FF0015 solid thick';\n      this.badWord.play();\n      setTimeout(() => document.getElementById(\"word-input\").style.outline = 'none', 200);\n\n    }\n  }\n\n  incrementScore(word) {\n    if (word.length === 3) {\n      this.score += 5;\n    } else if (word.length === 4) {\n      this.score += 10;\n    } else if (word.length === 5) {\n      this.score += 15;\n    } else if (word.length === 6) {\n      this.score += 25;\n    } else if (word.length === 7) {\n      this.score += 35;\n    } else if (word.length === 8) {\n      this.score += 45;\n    } else if (word.length === 9) {\n      this.score += 60;\n    } else {\n      this.score += 70;\n    }\n  }\n\n  lose() {\n    if ((this.board.grid[0][0] !== null) || (this.board.grid[1][0] !== null)\n      || (this.board.grid[2][0] !== null)) {\n        return true;\n      }\n    return false;\n  }\n\n}\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 0\n// module chunks = 0","class Tile {\n  constructor() {\n    this.letter = this.chooseLetter();\n  }\n\n  chooseLetter() {\n    const letterFrequencies = [[null,'E','T','A','O','I','N','S','R','H','D',\n    'L','U','C','M','F','Y','W','G','P','B','V','K','X','Q','J','Z'],\n  [0,12.02,21.12,29.24,36.92,44.23,51.18,57.46,63.48,69.40,73.72,77.70,80.58,\n    83.29,5.90,88.20,90.31,92.40,94.43,96.25,97.74,98.85,99.54,99.71,99.82,\n    99.92,100]];\n\n    let randomNum = (Math.random() * 100).toFixed(2);\n    for (let i = 1; i < letterFrequencies[1].length; i++) {\n      if (randomNum <= letterFrequencies[1][i] && randomNum > letterFrequencies[1][i-1]) {\n        return letterFrequencies[0][i];\n      }\n    }\n  }\n}\n\nmodule.exports = Tile;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/tile.js\n// module id = 1\n// module chunks = 0","const View = require('./game-view.js');\nconst Game = require('./game.js');\n\n$(function () {\n  const rootEl = ('.word-game');\n  new View(rootEl);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 2\n// module chunks = 0","const Game = require('./game.js');\n\nclass View {\n\n  constructor($el) {\n    this.$el = $el;\n    this.string = \"\";\n    this.wordForm = $(\".word-form\");\n    let dictionary;\n    $.get(\"https://s3-us-west-1.amazonaws.com/virginia-wordgame/AllWords.txt\", (txt) => {\n      dictionary = txt.split('\\n');\n    }).then((dict) => {\n      this.game = new Game(dictionary);\n      this.setupBoard();\n    });\n\n    this.interval = window.setInterval(\n      this.step.bind(this), this.stepMillis()\n    );\n\n    $(\".string\").focus();\n    this.gamePlay = document.getElementById(\"gamePlay\");\n    this.gameOver = document.getElementById(\"gameOver\");\n\n    $( \"#word-form\" ).submit((e) => this.handleSubmit(e));\n\n    $(window).on(\"keydown\", this.handleEnter.bind(this));\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // faster speed of moving tiles with increasing score\n  descendingInterval() {\n    clearInterval(this.interval);\n    this.interval = window.setInterval(\n      this.step.bind(this), this.stepMillis()\n    );\n  }\n\n  stepMillis() {\n    if (!this.game) {\n      return 7000;\n    } else if (this.game.score <= 265) {\n      return (-20*this.game.score)+7000;\n    } else {\n      return 1700;\n    }\n  }\n\n  // submit the form if Enter is pressed\n  handleEnter(e) {\n    if (e.keyCode === 13) {\n      if (document.getElementById(\"intro\")) {\n        this.startGame();\n      } else {\n        if (document.getElementById(\"replay\") === null) {\n          e.preventDefault();\n          $( \"#word-form\" ).submit();\n        } else {\n          e.preventDefault();\n          location.reload();\n        }\n      }\n    }\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.string = $( \"input:first\" ).val().toUpperCase();\n    if (this.game.board.validWord(this.string)) {\n      this.game.handleWord(this.string);\n      this.render();\n      this.string = \"\";\n      let form = document.getElementById(\"word-form\");\n      form.reset();\n      let $score = document.getElementById(\"score\");\n      $($score).attr('data-score', this.game.score);\n    } else {\n      document.getElementById(\"word-input\").style.outline = '#FF0015 solid thick';\n      this.game.badWord.play();\n      setTimeout(() => document.getElementById(\"word-input\").style.outline = 'none', 200);\n    }\n  }\n\n  handleCharacter(e) {\n    e.preventDefault();\n    this.string = e.target.value;\n    // check if the new character is in the list of letters on the screen.\n    // If it is, turn that tile green. If it's not, give an alert/indicator\n    let lastChar = this.string.charAt(this.string.length-1);\n    this.board.handleLetter(lastChar);\n  }\n\n  setupBoard() {\n    // setting up the tiles grid\n    const $ul = $(\"<ul>\");\n    $ul.attr('id','all-tiles');\n\n    for (let rowIdx = 0; rowIdx < this.game.board.height; rowIdx++) {\n      for (let colIdx = 0; colIdx < this.game.board.width; colIdx++) {\n        let $li = $(\"<li>\");\n        $li.data(\"pos\", [rowIdx, colIdx]);\n        if (this.game.board.grid[rowIdx][colIdx]) {\n          $li.attr('data-letter', this.game.board.grid[rowIdx][colIdx].letter);\n          $li.addClass(\"tile\");\n        }\n\n        $ul.append($li);\n      }\n    }\n\n    $(this.$el).append($ul);\n\n    // adding the bar to the left of the tiles\n    const $ledge = $(\"<div>\");\n    $ledge.attr('id','ledge');\n    $(this.$el).append($ledge);\n\n    // introductory box\n    const $intro = $(\"<div><h1>INSTRUCTIONS</h1><p>Type out words using the letters on the screen. Use the letters before they hit the red bar. Words are 3 letters minimum, and longer words earn you more points. The higher your score, the faster the tiles move. Good luck!</p></div>\");\n    $intro.attr('id','intro');\n    const $start = $(\"<button id='start'>START</button>\");\n    $start.click(this.startGame);\n    $intro.append($start);\n    $(this.$el).append($intro);\n  }\n\n  startGame() {\n    this.gamePlay = document.getElementById(\"gamePlay\");\n    this.gamePlay.volume = 0.3;\n    this.gamePlay.loop = true;\n\n    let musicPromise = this.gamePlay.play();\n    if (musicPromise !== undefined) {\n      musicPromise.catch(error => {\n        console.log(error);\n      });\n    }\n\n    let $intro = document.getElementById(\"intro\");\n    $intro.remove();\n\n    let $cover = document.getElementById(\"cover\");\n    $cover.remove();\n\n    let $input = document.getElementById(\"word-input\");\n    $input.focus();\n  }\n\n  render() {\n    let $ul2 = document.getElementById(\"all-tiles\");\n    $ul2.remove();\n\n    const $ul = $(\"<ul>\");\n    $ul.attr('id','all-tiles');\n    for (let rowIdx = 0; rowIdx < this.game.board.height; rowIdx++) {\n      for (let colIdx = 0; colIdx < this.game.board.width; colIdx++) {\n        let $li = $(\"<li>\");\n        $li.data(\"pos\", [rowIdx, colIdx]);\n        if (this.game.board.grid[rowIdx][colIdx]) {\n          $li.attr('data-letter', this.game.board.grid[rowIdx][colIdx].letter);\n          $li.addClass(\"tile\");\n        }\n\n        $ul.append($li);\n      }\n    }\n\n    $(this.$el).append($ul);\n  }\n\n  step() {\n    this.descendingInterval();\n\n    let $intro = document.getElementById(\"intro\");\n    if (!$intro) {\n      this.game.board.incrementTiles();\n      this.render();\n      if (this.game.lose()) {\n        this.gamePlay.pause();\n        this.displayLosing();\n      }\n    }\n  }\n\n  displayLosing() {\n    clearInterval(this.interval);\n    this.gameOver.play();\n\n    let $form = document.getElementById(\"word-form\");\n    $form.remove();\n\n    const $ul = $(\"<ul>\");\n    $ul.attr('id','game-over');\n    $ul.text(\"GAME OVER\");\n\n    $(this.$el).append($ul);\n\n    const $replay = $(\"<ul><button id='replay' onclick='location.reload()'>PLAY AGAIN!</button></ul>\");\n    $replay.attr('id','replay');\n\n    setTimeout(() => $(this.$el).append($replay) , 2000);\n  }\n\n}\n\nmodule.exports = View;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game-view.js\n// module id = 3\n// module chunks = 0","const Tile = require(\"./tile.js\");\n\nclass Board {\n  constructor(x,y) {\n    this.width = x;\n    this.height = y;\n    this.grid = [];\n    for (let i = 0; i < this.height; i++) {\n      this.grid.push(new Array(x).fill(null));\n    }\n    this.initializeTiles();\n\n  }\n\n  initializeTiles() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = (this.grid[0].length/2)+2; j < this.grid[0].length; j++) {\n        let tile = new Tile();\n        this.grid[i][j] = tile;\n      }\n    }\n  }\n\n  incrementTiles() {\n    for (let i = 0; i < this.grid.length; i++) {\n      this.grid[i].shift();\n      this.grid[i].push(new Tile());\n    }\n  }\n\n  // updates the tile's class to \"selected\" if the letter exists in the\n  // letters shown on the screen and has not yet been selected. Returns\n  // an error if the letter can't be found\n  handleLetter(letter) {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[0].length; j++) {\n        if (this.grid[i][j].letter === letter ) { // NOTE: AND class != selected\n          // change the tile's class to selected, then break\n        }\n      }\n    }\n    // give an error\n  }\n\n  // returns true if all the letters for the word are on the screen\n  validWord(word) {\n    let wordLetters= {};\n    for (let i = 0; i < word.length; i++) {\n      let letter = word[i];\n      if (!wordLetters[letter]) {\n        wordLetters[letter] = 1;\n      } else {\n        wordLetters[letter] += 1;\n      }\n    }\n\n    let counter = word.length;\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[0].length; j++) {\n        if (this.grid[i][j]) {\n          let letter = this.grid[i][j].letter;\n          if (wordLetters[letter] && wordLetters[letter] !== 0) {\n            wordLetters[letter] -= 1;\n            counter -= 1;\n            if (counter === 0) return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // clear the letters of the word from the list of letters on the screen\n  clearWord(word) {\n    let tempWord = word;\n    tempWord = tempWord.toUpperCase().split('');\n    tempWord.forEach((el) => {\n      let removed = false;\n      for (let i = 0; i < this.grid[0].length; i++) {\n        for (let j = 0; j < this.grid.length; j++) {\n          if (!removed && this.grid[j][i]) {\n            if (this.grid[j][i].letter === el) {\n              this.grid[j][i] = null;\n              removed = true;\n            }\n          }\n        }\n      }\n    });\n  }\n\n}\n\nmodule.exports = Board;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/board.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}